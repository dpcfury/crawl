JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaVisitRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaPetRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaOwnerRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl JpaVetRepositoryImpl 
em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em em 
save save save save save findByPetId findByPetId findByPetId findByPetId findByPetId findPetTypes findPetTypes findPetTypes findPetTypes findPetTypes findById findById findById findById findById save save save save save findByLastName findByLastName findByLastName findByLastName findByLastName findById findById findById findById findById save save save save save findAll findAll findAll findAll findAll save save save save save findByPetId findByPetId findByPetId findByPetId findByPetId findPetTypes findPetTypes findPetTypes findPetTypes findPetTypes findById findById findById findById findById save save save save save findByLastName findByLastName findByLastName findByLastName findByLastName findById findById findById findById findById save save save save save findAll findAll findAll findAll findAll 
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the ClinicService interface using EntityManager.
 * <p/>
 * <p>The mappings are defined in "orm.xml" located in the META-INF directory.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link PetRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link OwnerRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
/**
     * Important: in the current version of this method, we load Owners with all their Pets and Visits while
     * we do not need Visits at all and we only need one property from the Pet objects (the 'name' property).
     * There are some ways to improve it such as:
     * - creating a Ligtweight class (example here: https://community.jboss.org/wiki/LightweightClass)
     * - Turning on lazy-loading and using {@link OpenSessionInViewFilter}
     *
//www.apache.org/licenses/LICENSE-2.0
//community.jboss.org/wiki/LightweightClass)
// using 'join fetch' because a single query should load both owners and pets
// using 'left join fetch' because it might happen that an owner does not have pets yet
// using 'join fetch' because a single query should load both owners and pets
// using 'left join fetch' because it might happen that an owner does not have pets yet
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link VetRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the ClinicService interface using EntityManager.
 * <p/>
 * <p>The mappings are defined in "orm.xml" located in the META-INF directory.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0

/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link PetRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0

/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link OwnerRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
/**
     * Important: in the current version of this method, we load Owners with all their Pets and Visits while
     * we do not need Visits at all and we only need one property from the Pet objects (the 'name' property).
     * There are some ways to improve it such as:
     * - creating a Ligtweight class (example here: https://community.jboss.org/wiki/LightweightClass)
     * - Turning on lazy-loading and using {@link OpenSessionInViewFilter}
     *
//www.apache.org/licenses/LICENSE-2.0

//community.jboss.org/wiki/LightweightClass)

// using 'join fetch' because a single query should load both owners and pets

// using 'left join fetch' because it might happen that an owner does not have pets yet

// using 'join fetch' because a single query should load both owners and pets

// using 'left join fetch' because it might happen that an owner does not have pets yet

/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
/**
 * JPA implementation of the {@link VetRepository} interface.
 *
 * @author Mike Keith
 * @author Rod Johnson
 * @author Sam Brannen
 * @author Michael Isvy
 * @since 22.4.2006
 *
//www.apache.org/licenses/LICENSE-2.0

